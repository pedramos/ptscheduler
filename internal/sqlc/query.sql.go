// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addAvailability = `-- name: AddAvailability :exec
Insert into availability (traineeid, startdate, enddate) values(?,?,?)
`

type AddAvailabilityParams struct {
	Traineeid sql.NullInt64
	Startdate sql.NullString
	Enddate   sql.NullString
}

func (q *Queries) AddAvailability(ctx context.Context, arg AddAvailabilityParams) error {
	_, err := q.db.ExecContext(ctx, addAvailability, arg.Traineeid, arg.Startdate, arg.Enddate)
	return err
}

const getPassword = `-- name: GetPassword :one
Select password from usernames where username = ?
`

func (q *Queries) GetPassword(ctx context.Context, username []byte) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getPassword, username)
	var password []byte
	err := row.Scan(&password)
	return password, err
}

const newSession = `-- name: NewSession :exec
Insert into schedule (traineeid, date) values(?,?)
`

type NewSessionParams struct {
	Traineeid sql.NullInt64
	Date      sql.NullString
}

func (q *Queries) NewSession(ctx context.Context, arg NewSessionParams) error {
	_, err := q.db.ExecContext(ctx, newSession, arg.Traineeid, arg.Date)
	return err
}

const newTrainee = `-- name: NewTrainee :one
Insert into trainee (name, perweek, late) values (?,?,?) Returning id
`

type NewTraineeParams struct {
	Name    sql.NullString
	Perweek sql.NullInt64
	Late    sql.NullInt64
}

func (q *Queries) NewTrainee(ctx context.Context, arg NewTraineeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, newTrainee, arg.Name, arg.Perweek, arg.Late)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const newUsername = `-- name: NewUsername :exec
Insert into usernames (traineeid, username, password) values(?,?, ?)
`

type NewUsernameParams struct {
	Traineeid sql.NullInt64
	Username  []byte
	Password  []byte
}

func (q *Queries) NewUsername(ctx context.Context, arg NewUsernameParams) error {
	_, err := q.db.ExecContext(ctx, newUsername, arg.Traineeid, arg.Username, arg.Password)
	return err
}

const realName = `-- name: RealName :one
Select name from trainee, usernames where trainee.id = usernames.traineeid and usernames.username = ?
`

func (q *Queries) RealName(ctx context.Context, username []byte) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, realName, username)
	var name sql.NullString
	err := row.Scan(&name)
	return name, err
}

const scheduledAvailability = `-- name: ScheduledAvailability :many
;

Select startdate, enddate from availability, usernames where availability.traineeid = usernames.traineeid and usernames.username = ? and availability.enddate > date('now', '-1 day')
`

type ScheduledAvailabilityRow struct {
	Startdate sql.NullString
	Enddate   sql.NullString
}

func (q *Queries) ScheduledAvailability(ctx context.Context, username []byte) ([]ScheduledAvailabilityRow, error) {
	rows, err := q.db.QueryContext(ctx, scheduledAvailability, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScheduledAvailabilityRow
	for rows.Next() {
		var i ScheduledAvailabilityRow
		if err := rows.Scan(&i.Startdate, &i.Enddate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const scheduledTrainning = `-- name: ScheduledTrainning :many
Select date from schedule, usernames where schedule.traineeid = usernames.traineeid and usernames.username = ? and schedule.date > date('now', '-1 day')
`

func (q *Queries) ScheduledTrainning(ctx context.Context, username []byte) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, scheduledTrainning, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var date sql.NullString
		if err := rows.Scan(&date); err != nil {
			return nil, err
		}
		items = append(items, date)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
